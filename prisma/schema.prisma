generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  hashedPassword String
  firstName      String
  lastName       String
  role           Role      @default(USER)
  client         Client?
  employee       Employee?
}

model Client {
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String                 @id
  reviews               Review[]
  appointments          Appointment[]
  temporaryAppointments TemporaryAppointment[]
}

model Employee {
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String                 @id
  availability          Availability[]
  appointments          Appointment[]
  services              Service[]
  reviews               Review[]
  temporaryAppointments TemporaryAppointment[]
  timeOff               TimeOff[]
}

model Appointment {
  id        String   @id @default(cuid())
  title     String
  startTime DateTime
  endTime   DateTime

  paymentMethod PaymentMethod @default(Cash)

  employee   Employee? @relation(fields: [employeeId], references: [userId], onDelete: SetNull)
  employeeId String?

  client   Client? @relation(fields: [clientId], references: [userId], onDelete: SetNull)
  clientId String?

  service   Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  serviceId String?
}

model TemporaryAppointment {
  id        String   @id @default(cuid())
  title     String
  startTime DateTime
  endTime   DateTime

  employee   Employee? @relation(fields: [employeeId], references: [userId], onDelete: SetNull)
  employeeId String?

  client   Client? @relation(fields: [clientId], references: [userId], onDelete: SetNull)
  clientId String?

  service   Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  serviceId String?

  createdAt DateTime @default(now())
}

model Service {
  id       String          @id @default(cuid())
  title    String
  price    Int
  duration Int
  category ServiceCategory @default(Hair)

  stripeProductId String? @unique
  stripePriceId   String? @unique

  employees             Employee[]
  appointments          Appointment[]
  reviews               Review[]
  temporaryAppointments TemporaryAppointment[]
}

model Review {
  id        String   @id @default(cuid())
  content   String?
  rating    Int
  createdAt DateTime @default(now())

  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  String
  client     Client   @relation(fields: [clientId], references: [userId], onDelete: SetDefault)
  clientId   String   @default("DELETED")
  employee   Employee @relation(fields: [employeeId], references: [userId], onDelete: SetDefault)
  employeeId String   @default("DELETED")

  @@unique([clientId, employeeId, serviceId])
}

model Availability {
  id         String    @id @default(cuid())
  day        Day
  fromTime   String
  untilTime  String
  isActive   Boolean   @default(true)
  employee   Employee? @relation(fields: [employeeId], references: [userId], onDelete: Cascade)
  employeeId String?
}

model TimeOff {
  id         String   @id @default(cuid())
  employee   Employee @relation(fields: [employeeId], references: [userId])
  employeeId String
  startDate  DateTime
  endDate    DateTime
}

enum Role {
  ADMIN
  USER
  EMPLOYEE
}

enum ServiceCategory {
  Brows
  Lashes
  Hair
  Nails
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum PaymentMethod {
  Online
  Cash
}
